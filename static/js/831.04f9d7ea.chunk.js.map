{"version":3,"file":"static/js/831.04f9d7ea.chunk.js","mappings":"mSAGaA,EAASC,EAAAA,EAAAA,IAAH,iEAKNC,EAAUD,EAAAA,EAAAA,KAAH,gGAOPE,EAAWF,EAAAA,EAAAA,GAAH,oGAORG,EAASH,EAAAA,EAAAA,OAAH,isBAyCNI,GAJWJ,EAAAA,EAAAA,MAAH,0CAIGA,EAAAA,EAAAA,MAAH,2SAgBRK,EAAYL,EAAAA,EAAAA,EAAH,0E,UCvEP,SAASM,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAGlBG,EAAoB,SAACC,GACvB,MAAsBA,EAAEC,OAAjBZ,EAAP,EAAOA,KAAMa,EAAb,EAAaA,MAEb,OAAOb,GACL,IAAK,OACH,OAAOC,EAAQY,GACjB,IAAK,QACH,OAAOV,EAASU,GAClB,IAAK,WACH,OAAOR,EAAYQ,GACrB,QACA,OAEH,EAkBH,OAEI,UAAC3B,EAAD,YACI,SAACG,EAAD,gCACCO,IAAW,SAACJ,EAAD,sDAGZ,UAACJ,EAAD,CAAS0B,SArBI,SAACH,GAClBA,EAAEI,iBACFrB,GAASsB,EAAAA,EAAAA,IAAS,CAAChB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAChCD,EAAS,IACTF,EAAQ,IACRI,EAAY,GACX,EAeG,WACI,4BACE,SAACd,EAAD,CACE0B,KAAK,OACLjB,KAAK,OAGLkB,UAAQ,EACRC,SAAUT,EACVG,MAAOb,EACPoB,GAAId,EACJe,YAAY,YAIhB,4BACI,SAAC9B,EAAD,CACE0B,KAAK,QACLjB,KAAK,QACLkB,UAAQ,EACRC,SAAUT,EACVG,MAAOX,EACPkB,GAAIZ,EACJa,YAAY,cAIlB,4BACI,SAAC9B,EAAD,CACE0B,KAAK,WACLjB,KAAK,WACLkB,UAAQ,EACRC,SAAUT,EACVG,MAAOT,EACPgB,GAAIX,EACJY,YAAY,gBAGpB,SAAC/B,EAAD,CAAQ2B,KAAK,SAAb,qBAKb,CCjGc,SAASK,IACpB,OACI,4BACG,SAAC7B,EAAD,KACD,SAAC,KAAD,MAIT,C,wDCXM,IAkBIc,EAAS,eAACgB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACP,EAAIQ,GAWvD,OARER,IAFFQ,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/register/RegisterFormStyled.jsx","components/register/RegisterForm.jsx","pages/register/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\n\nexport const DivBox = styled.div`\npadding-top: 64px;\ntext-align: center;\n`\n\nexport const FormBox = styled.form`\npadding: 16px;\nwidth: 500px;\ndisplay: flex;\nflex-direction: column;\n`;\n\nexport const TitleBox = styled.h2`\nmargin: 0px;\nmargin-bottom: 8px;\nmargin-left: auto;\nmargin-right: auto;\n`;\n\nexport const Button = styled.button`\ndisplay: block;   \nmin-width: 200px;\npadding: 10px 55px 10px 56px;\nmargin-top: 16px;\nmargin-left: auto;\nmargin-right: auto; \n   \n  \n    border-radius: 4px;   \n    border: 0;\n    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.15);\n\n   \n   font-weight: 700;\n   font-size: 16px;\n   line-height: 1.88;\n   letter-spacing: 0.06em;\n   text-align: center;\n\n   background-color: rgba(33, 150, 243, 1);\n   color: rgba(255, 255, 255, 1);\n   cursor: pointer;\n\n   transition-property: background;\n   transition-duration: 250ms;\n   transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n\n   &:hover,\n   &:focus {\n       color: var(--button-link-color);\n    }\n}\n`;\n\n\nexport const LabelBox = styled.label`\nfont-size: 24px;\n`;\n\nexport const InputBox = styled.input`\nmin-width: 360px;\nmargin: 0;\nmargin-bottom: 8px;\npadding: 12px 15px 12px 42px;\nfont-size: 20px;\nborder: 1px solid;\nborder-color: rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\noutline: transparent;\n\n&:hover,\n&:focus-within {\nborder-color: var(--button-link-color);\n`;\n\nexport const ErrorText = styled.p`\nfont-size: 24px;\nfont-weight: 700;\ncolor: red;\n`;","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { nanoid } from 'nanoid';\nimport { register } from 'redux/operations';\nimport { getErrorAuth } from '../../redux/selectors';\nimport { DivBox, TitleBox, FormBox, InputBox, Button, ErrorText } from \"./RegisterFormStyled\";\n\n\nexport default function RegisterForm() {\n    const dispatch = useDispatch();\n    const isError = useSelector(getErrorAuth);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const nameInputId = nanoid();\n    const emailInputId = nanoid();\n    const passwordInputId = nanoid();\n\n    \n    const handleInputChange = (e) => {\n        const {name, value} = e.target;   \n        \n        switch(name) {\n          case \"name\":\n            return setName(value);\n          case \"email\":\n            return setEmail(value); \n          case \"password\":\n            return setPassword(value); \n          default:\n          return;\n        }\n      };\n\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();        \n        dispatch(register({name, email, password}));\n        setEmail('');\n        setName('');\n        setPassword('');\n        };\n\n        // if (isLoged) {\n        //   return <Navigate to=\"/contacts\"/>\n        // }\n\n\n    \n    return(\n\n        <DivBox>\n            <TitleBox>Registration page</TitleBox>\n            {isError && <ErrorText>Oops, something went wrong, try again!</ErrorText>}\n\n        \n            <FormBox onSubmit={handleSubmit}>\n                <label>\n                  <InputBox\n                    type=\"text\"\n                    name=\"name\"\n                    // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    onChange={handleInputChange}\n                    value={name}    \n                    id={nameInputId}   \n                    placeholder=\"Name\"         \n                /> \n                </label>\n          \n                <label>\n                    <InputBox\n                      type=\"email\"\n                      name=\"email\"\n                      required\n                      onChange={handleInputChange}\n                      value={email}    \n                      id={emailInputId}  \n                      placeholder=\"E-mail\"        \n                    /> \n                </label>\n          \n                <label>\n                    <InputBox\n                      type=\"password\"\n                      name=\"password\"\n                      required\n                      onChange={handleInputChange}\n                      value={password}  \n                      id={passwordInputId} \n                      placeholder=\"Password\"             \n                    />  \n                </label>\n              <Button type=\"submit\">Ok</Button>\n            </FormBox>\n        </DivBox>\n\n    )\n}","import { Outlet } from \"react-router-dom\";\nimport RegisterForm from '../../components/register/RegisterForm';\n\n\nexport default function RegisterPage() {\n    return(\n        <div>\n          {<RegisterForm/>}\n          <Outlet/>\n        </div>\n      \n    )\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["DivBox","styled","FormBox","TitleBox","Button","InputBox","ErrorText","RegisterForm","dispatch","useDispatch","isError","useSelector","getErrorAuth","useState","name","setName","email","setEmail","password","setPassword","nameInputId","nanoid","emailInputId","passwordInputId","handleInputChange","e","target","value","onSubmit","preventDefault","register","type","required","onChange","id","placeholder","RegisterPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}