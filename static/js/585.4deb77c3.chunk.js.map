{"version":3,"file":"static/js/585.4deb77c3.chunk.js","mappings":"kQAMe,SAASA,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAGlBE,EAAoB,SAACC,GACvB,MAAsBA,EAAEC,OAAjBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAEb,OAAOD,GACL,IAAK,QACH,OAAOT,EAASU,GAClB,IAAK,WACH,OAAOR,EAAYQ,GACrB,QACA,OAEH,EAYH,OAEI,4BACI,wCACA,kBAAMC,SAbO,SAACJ,GAClBA,EAAEK,iBACFhB,GAASiB,EAAAA,EAAAA,IAAM,CAACd,MAAAA,EAAOE,SAAAA,KACvBD,EAAS,IACTE,EAAY,GACf,EAQO,WACI,sCACI,kBACEY,KAAK,QACLL,KAAK,QAGLM,UAAQ,EACRC,SAAUV,EACVI,MAAOX,EACPkB,GAAId,QAIV,yCACI,kBACEW,KAAK,WACLL,KAAK,WAGLM,UAAQ,EACRC,SAAUV,EACVI,MAAOT,EACPgB,GAAIZ,QAGZ,mBAAQS,KAAK,SAAb,wBAKb,CCtEc,SAASI,IACpB,OACI,4BACK,SAACvB,EAAD,KACD,SAAC,KAAD,MAGX,C,wDCTM,IAkBIS,EAAS,eAACe,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/login/LoginForm.jsx","pages/login/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { nanoid } from 'nanoid';\nimport { login } from 'redux/operations';\n\n\nexport default function LoginForm() {\n    const dispatch = useDispatch();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const emailInputId = nanoid();\n    const passwordInputId = nanoid();\n\n    \n    const handleInputChange = (e) => {\n        const {name, value} = e.target;  \n        \n        switch(name) {\n          case \"email\":\n            return setEmail(value); \n          case \"password\":\n            return setPassword(value); \n          default:\n          return;\n        }\n      };\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();        \n        dispatch(login({email, password}));\n        setEmail('');\n        setPassword('');\n    };\n\n\n\n    return(\n\n        <div>\n            <h1>Login page</h1>\n            <form onSubmit={handleSubmit}>\n                <label>Email\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                      // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                      required\n                      onChange={handleInputChange}\n                      value={email}    \n                      id={emailInputId}          \n                    /> \n                </label>\n          \n                <label>Password\n                    <input\n                      type=\"password\"\n                      name=\"password\"\n                      // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                      // title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                      required\n                      onChange={handleInputChange}\n                      value={password}  \n                      id={passwordInputId}            \n                    />  \n                </label>\n              <button type=\"submit\">Login</button>\n            </form>\n        </div>\n\n    )\n}","import { Outlet } from \"react-router-dom\";\nimport LoginForm from \"components/login/LoginForm\";\n\nexport default function LoginPage() {\n    return(\n        <div>\n            {<LoginForm/>}\n            <Outlet/>\n        </div>\n    )\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LoginForm","dispatch","useDispatch","useState","email","setEmail","password","setPassword","emailInputId","nanoid","passwordInputId","handleInputChange","e","target","name","value","onSubmit","preventDefault","login","type","required","onChange","id","LoginPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}