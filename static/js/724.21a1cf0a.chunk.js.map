{"version":3,"file":"static/js/724.21a1cf0a.chunk.js","mappings":"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","sources":["components/filter/FilterStyled.jsx","components/filter/Filter.jsx","components/form/FormStyled.jsx","components/form/Form.jsx","components/contacts/ContactsStyled.jsx","components/contacts/Contacts.jsx","pages/contacts/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const LabelBox = styled.label`\nfont-size: 36px;\n`;\n\nexport const InputBox = styled.input`\nmargin-left: 10px;\nfont-size: 16px;\noutline: transparent;\nborder-radius: 4px;\n\n&:focus,\n&:hover {\n    border-color: rgb(33, 150, 243);\n}\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport { filterContacts } from 'redux/filterSlice';\nimport { LabelBox, InputBox } from \"./FilterStyled\";\n\nconst Filter = () => {\n\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const serchingFilter = (e) => {\n    const value = e.currentTarget.value;\n    dispatch(filterContacts(value));\n  };  \n  \n\n    return(\n        <LabelBox>\n          Find contacts by name\n          <InputBox \n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          \n          \n          type=\"text\"\n           name=\"filter\" \n          value={filter}\n           onChange={serchingFilter} />\n        </LabelBox>\n    )\n}\n\nexport default Filter;\n","import styled from \"@emotion/styled\";\n\nexport const FormBox = styled.div`\n// padding: 16px;\nwidth: 300px;\ndisplay: flex;\nflex-direction: column;\n`;\n\nexport const ButtonAdd = styled.button`\nmargin-top: 16px;\nmin-width: 200px;\nheight: 40px;\nfont-size: 20px;\nbackground-color: rgb(24, 140, 232);\ncolor: #ffffff;\nborder: none;\nborder-radius: 4px;\n\n&:hover,\n&:focus {\n    background-color: rgb(100, 50, 200);\n}\n`;\n\nexport const LabelBox = styled.label`\nfont-size: 24px;\n`;\n\nexport const InputBox = styled.input`\nmargin-left: 10px;\nfont-size: 16px;\noutline: transparent;\nborder-radius: 4px;\n\n&:focus,\n&:hover {\n    border-color: rgb(33, 150, 243);\n}\n`;","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport { getItems } from '../../redux/selectors';\nimport { FormBox, ButtonAdd, InputBox, LabelBox } from './FormStyled';\n\n\nconst nameInputId = nanoid(5);\nconst numberInputId = nanoid(8) \n\n\nconst Form = () => {\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  const handleInputChange = (e) => {\n    const {name, value} = e.currentTarget;  \n    \n    switch(name) {\n      case \"number\":\n        return setPhone(value); \n      case \"name\":\n        return setName(value); \n      default:\n      return;\n    }\n  };\n\n  \n  const chekingContacts = () => {\n    const findContact = items.find((item) => item.name === name);\n    const findNumber = items.find((item) => item.phone === phone);\n\n    if (findContact) { \n      alert(`${name} is already in contacts`);      \n    } \n      else if (findNumber) { \n      alert(`${phone} is already in contacts`);      \n    }             \n  };\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    chekingContacts();\n    dispatch(addContact({name, phone}));\n    setName('');\n    setPhone('');\n    };\n\n\n  return(\n    <FormBox>\n      <form onSubmit={handleSubmit}>\n        <LabelBox>Name\n          <InputBox\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleInputChange}\n            value={name}    \n            id={nameInputId}          \n          /> \n        </LabelBox>\n          \n        <LabelBox>Number\n          <InputBox\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleInputChange}\n            value={phone}  \n            id={numberInputId}            \n          />  \n        </LabelBox>\n          \n        <ButtonAdd type=\"submit\">Add contact</ButtonAdd>\n      </form>\n    </FormBox>  \n  )\n}\n\nexport default Form;\n","import styled from '@emotion/styled';\n\nexport const SecondaryTitleBox = styled.h2`\nmargin: 0px;\nmargin-bottom: 8px;\n`;\n\nexport const ListContacts = styled.ul`\nmargin: 0px;\nlist-style: none;\npadding: 0px;\n`;\n\nexport const ButtonDel = styled.button`\nmin-width: 100px;\nmargin-left: 16px;\nfont-size: 20px;\nbackground-color: rgb(24, 140, 232);\ncolor: #ffffff;\nborder: none;\nborder-radius: 4px;\n\n&:hover,\n&:focus {\n    background-color: rgb(100, 50, 200);\n}\n`;\n\nexport const ListItem = styled.li`\nmargin-bottom: 8px;\n`","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../../redux/operations';\nimport { getFilter, getItems } from '../../redux/selectors';\nimport Filter from 'components/filter/Filter';\nimport Form from '../form/Form'\nimport { SecondaryTitleBox, ListContacts, ListItem, ButtonDel } from './ContactsStyled';\n\n\nconst Contacts = () => {\n\n  const filter = useSelector(getFilter);\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contactFiltering = () => { \n    const normalizeFilter = filter.toLowerCase();\n    return items.filter(item => item.name.toLowerCase().includes(normalizeFilter))\n  };\n\n  const filteredContacts = contactFiltering(); \n\n\n  return (\n    <>\n    <SecondaryTitleBox>Contacts</SecondaryTitleBox>\n    <Form/>\n    <ListContacts>\n      {filteredContacts.map(({ id, name, phone }) => \n        <ListItem key={id}>\n          {name}: {phone}\n          <ButtonDel type='button' onClick={() => {\n                dispatch(deleteContact(id));\n              }}>Delete</ButtonDel> \n        </ListItem>)\n      }        \n    </ListContacts>\n    <Filter/>\n    </>\n  )   \n}\n\n\nexport default Contacts;\n","import { Outlet } from \"react-router-dom\";\nimport Contacts from \"components/contacts/Contacts\";\n\nexport default function ContactsPage() {\n    return(\n        <div>\n            {<Contacts/>}\n            <Outlet/>\n        </div>\n    )\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LabelBox","styled","InputBox","filter","useSelector","getFilter","dispatch","useDispatch","pattern","title","required","type","name","value","onChange","e","currentTarget","filterContacts","FormBox","ButtonAdd","nameInputId","nanoid","numberInputId","useState","setName","phone","setPhone","items","getItems","handleInputChange","onSubmit","preventDefault","findContact","find","item","findNumber","alert","chekingContacts","addContact","id","SecondaryTitleBox","ListContacts","ButtonDel","ListItem","useEffect","fetchContacts","filteredContacts","normalizeFilter","toLowerCase","includes","contactFiltering","map","onClick","deleteContact","ContactsPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}